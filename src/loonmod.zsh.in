#!/usr/bin/env zsh

export LOONCONFIG=@CMAKE_LOONLOCAL_CACHE@
MOD_SEQ="{}"

function mod_db()
{
    python2 @CMAKE_INSTALL_PREFIX@/bin/moddb.py $@
}

function listarray()
{
    for value in "$@"; do
        printf "%-8s\n" "${value}"
    done | sort | column
}

function export_all()
{
    mod_func_script=@CMAKE_INSTALL_PREFIX@/bin/mod_func.py

    export DYLD_LIBRARY_PATH=`python2 ${mod_func_script} parsereturn "$1" dyld_library_path`
    export LD_LIBRARY_PATH=`python2 ${mod_func_script} parsereturn "$1" ld_library_path`
    export LIBRARY_PATH=`python2 ${mod_func_script} parsereturn "$1" library_path`
    export CPLUS_INCLUDE_PATH=`python2 ${mod_func_script} parsereturn "$1" cplus_include_path`
    export C_INCLUDE_PATH=`python2 ${mod_func_script} parsereturn "$1" c_include_path`
    export PATH=`python2 ${mod_func_script} parsereturn "$1" path`
}

function print_loonmod_usage()
{
    echo "Usage: loonmod <subcommand> [module name]" >&2
    echo "    supported subcommand:" >&2
    echo "        avail  [-n module name]   list available modules" >&2
    echo "        clear                     clear all loaded modules" >&2
    echo "        depend    <module name>   show dependencies of a module" >&2
    echo "        info      <module name>   show module information" >&2
    echo "        list   [-n module name]   list loaded modules" >&2
    echo "        load      [module name]   load a module" >&2
    echo "        unload    [module name]   unload a module" >&2
}

function _get_mod_seq() {
    echo "$MOD_SEQ"
}

function _get_loonmod_script_root() {
    echo "@CMAKE_INSTALL_PREFIX@/bin"
}

function loonmod()
{
    if [ "$#" -eq "0" ]; then
        echo "[ERROR]: not a correct way to use the command"
        print_loonmod_usage
        return
    fi

    subcmd=$1
    shift

    mod_func_script=@CMAKE_INSTALL_PREFIX@/bin/mod_func.py

    if [[ "$subcmd" == "avail" ]]; then
        listarray `python2 ${mod_func_script} avail $@`

    elif [[ "$subcmd" == "clear" ]]; then
        retstr=`python2 ${mod_func_script} clear --seq "${MOD_SEQ}"`
        if [[ "${retstr}" != "{}" ]]; then
            export_all "${retstr}"
        fi
        MOD_SEQ="{}"

    elif [[ "$subcmd" == "depend" ]]; then
        listarray `python2 ${mod_func_script} depend -n $@`

    elif [[ "$subcmd" == "info" ]]; then
        python2 ${mod_func_script} info --seq "${MOD_SEQ}" -n $@

    elif [[ "$subcmd" == "list" ]]; then
        listarray `python2 ${mod_func_script} list --seq "${MOD_SEQ}" $@`

    elif [[ "$subcmd" == "load" ]]; then
        retstr=`python2 ${mod_func_script} load --seq "${MOD_SEQ}" -n $@`
        retval=`python2 ${mod_func_script} parsereturn "${retstr}" retval`
        if [[ "${retval}" == "LOADED" ]]; then
            echo "Module [$@] has already been loaded" >&2

        elif [[ "${retval}" == "UPGRADED" ]]; then
            MOD_SEQ=`python2 ${mod_func_script} parsereturn "${retstr}" seq`
            echo "Module [$@] has now been upgraded to 'U' type" >&2
        
        elif [[ "${retval}" == "UNKNOWN_TYPE" ]]; then
            echo "[ERROR]: Module [$@] has a wrong type. Something went wrong!!!" >&2

        elif [[ "${retval}" == "WRONG_NAME" ]]; then
            echo "[ERROR]: No module named [$@]" >&2

        elif [[ "${retval}" == "GOOD" ]]; then
            MOD_SEQ=`python2 ${mod_func_script} parsereturn "${retstr}" seq`
            export_all "${retstr}"
        else
            echo "[ERROR]: Unknown return value [${retval}]!!!"
        fi

    elif [[ "$subcmd" == "unload" ]]; then
        retstr=`python2 ${mod_func_script} unload --seq "${MOD_SEQ}" -n $@`
        retval=`python2 ${mod_func_script} parsereturn "${retstr}" retval`
        if [[ "${retval}" == "NOT_LOADED" ]]; then
            echo "Module [$@] was not loaded" >&2
        else
            if [[ "${retval}" == "SHOW_WARNING" ]]; then
                echo "[WARNING]: Module [$@] has been unloaded successfully, but some modules depend on it" >&2
            fi
            MOD_SEQ=`python ${mod_func_script} parsereturn "${retstr}" seq`
            export_all ${retstr}
        fi

    elif [[ "$subcmd" == "-h" || "$subcmd" == "--help" ]]; then
        print_loonmod_usage
        return
    else
        echo "[ERROR]: unknown subcommand $subcmd" >&2
    fi
}
